#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>
#include <map>
using namespace std;

int n;
map<int, vector<int>> map_ady;


struct Arista {
    int u, v, peso, indice;
    string tipo;
};

class DSU {
    vector<int> rank, parent;
public:
    DSU(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        for(int i = 0; i < n + 1; i++){
            parent[i] = i;
        }
    }
 
    int find(int node){
 
        // En caso que nodo sea el representante
        if (node == parent[node]) return node;
 
        // Hago path compression
        return parent[node] = find(parent[node]);
    }
 
    void unite(int u, int v) {
        int uRepresentative = find(u);
        int vRepresentative = find(v);
 
        // Si tienen el mismo representante, entonces pertenece al
        // mismo conjunto
        if (uRepresentative == vRepresentative) return;
 
        // Actualizamos el representante segun el caso del rank
        if (rank[uRepresentative] < rank[vRepresentative]) {
            parent[uRepresentative] = vRepresentative;
        } else if(rank[uRepresentative] > rank[vRepresentative]) {
            parent[vRepresentative] = uRepresentative;
        } else {
            parent[vRepresentative] = uRepresentative;
            rank[uRepresentative]++;
        }
    }
};

vector<int> disc, low, parent;
vector<bool> visited;
vector<pair<int, int>> bridges;
int time_counter;

void tarjan(int u, map<int, vector<int>>& map_ady, bool& hasBackEdge) {
    visited[u] = true;
    disc[u] = low[u] = ++time_counter;

    for (int v : map_ady[u]) {
        if (!visited[v]) {
            parent[v] = u;
            tarjan(v, map_ady, hasBackEdge);

            low[u] = min(low[u], low[v]);

            if (low[v] > disc[u] && hasBackEdge) {
                bridges.push_back({u, v});
            }
            
        } else if (v != parent[u]) {
            low[u] = min(low[u], disc[v]);
            hasBackEdge = true; // Se encontró otra arista que no es la arista padre
        }
    }
}

void kruskal(vector<Arista>& E, int n) {
    long long res = 0;
    sort(E.begin(), E.end(), [](const Arista& a, const Arista& b) {
        return a.peso < b.peso;
    });

    DSU dsu(n);
    vector<tuple<int,int>> aristas_AGM;

    for(int i = 0; i < E.size() - 1; i++){
        auto& arista = E[i];        
        //Si la prox arista tiene el mismo peso que la actual, entonces voy a iterar para agarrarme las aristas del mismo peso y luego agregarlas al grafo G'
        // y usar las componentes conexas de mi AGM actual como vertices, para luego hacer Tarjan(detectar las aristas puentes) y decir que estas son "any"
        // y las restantes son "at least one"
        if(arista.peso == E[i+1].peso){
            int j = i;
            vector<tuple<int, int>> aristas_G;

            while(j < E.size() && arista.peso == E[j].peso){
                aristas_G.push_back({E[j].u, E[j].v});
                j++;
            }
            
            map_ady.clear();

            // Agregar las aristas del AGM al grafo de adyacencia
            for (auto [u, v] : aristas_AGM) {
                int rep_u = dsu.find(u);
                int rep_v = dsu.find(v);
                if (rep_u != rep_v) {
                    map_ady[rep_u].push_back(rep_v);
                    map_ady[rep_v].push_back(rep_u);
                }
            }

            // Agregar las aristas del mismo peso al grafo de adyacencia
            for (auto [u, v] : aristas_G) {
                int rep_u = dsu.find(u);
                int rep_v = dsu.find(v);
                map_ady[rep_u].push_back(rep_v);
                map_ady[rep_v].push_back(rep_u);
            }
                

            // Inicializar variables para Tarjan
            disc.assign(n + 1, -1);
            low.assign(n + 1, -1);
            parent.assign(n + 1, -1);
            visited.assign(n + 1, false);
            bridges.clear();
            time_counter = 0;


            // Ejecutar Tarjan desde cada nodo no visitado
            for (int k = 0; k < n; k++) {
                if (!visited[k]) {
                    bool hasBackEdge = false;
                    tarjan(k, map_ady, hasBackEdge);
                }
            }

            // Marcar las aristas según el resultado de Tarjan
            bool agregadas_al_AGM = false;
            for (int h = 0; h < aristas_G.size(); h++) {
                auto [u, v] = aristas_G[h];
                if (find(bridges.begin(), bridges.end(), make_pair(u, v)) != bridges.end() ||
                    find(bridges.begin(), bridges.end(), make_pair(v, u)) != bridges.end()) {
                    E[i + h].tipo = "any";
                    dsu.unite(u,v);
                    aristas_AGM.push_back({u,v});
                } else {
                    E[i + h].tipo = "at least one";
                    if(!agregadas_al_AGM){
                        dsu.unite(u,v);
                        aristas_AGM.push_back({u,v});
                        agregadas_al_AGM = true;
                    }
                }
            }
            i = j - 1;
        }


        else if(dsu.find(arista.u) != dsu.find(arista.v)){
            dsu.unite(arista.u, arista.v);
            res += arista.peso;
            arista.tipo = "any";
            aristas_AGM.push_back({arista.u, arista.v});
        }

    }

}

int main() {
    int m;
    cin >> n >> m;
    vector<Arista> lista_aristas(m);
    for (int i = 0; i < m; i++) {
        int nodo1, nodo2, peso_arista;
        cin >> nodo1 >> nodo2 >> peso_arista;
        lista_aristas[i] = {nodo1, nodo2, peso_arista, i, "none"};
    }

    kruskal(lista_aristas, n);
    
    // Ordenar las aristas por su índice original para restaurar el orden
    sort(lista_aristas.begin(), lista_aristas.end(), [](const Arista& a, const Arista& b) {
        return a.indice < b.indice;
    });

    for (const auto& arista : lista_aristas) {
        cout << arista.tipo << endl;
    }

    return 0;
}

/*
void dfs(int nodo, map<int, vector<int>>& map_ady, int edgeNumber) {
    visited[nodo] = true;
    disc[nodo] = low[nodo] = ++time_counter;

    for (int vecino : map_ady[nodo]) {
        if(vecino.v == edgeNumber) continue;

        if(visited[vecino.u] == true){
            low[nodo] = min(low[nodo], disc[vecino.u]);
        }
            else {
                dfs(vecino.u, vecino.v);
                low[nodo] = min(low[nodo], low[vecino.u]);
            }
    }
    
    if (edgeNumer != 0) {
            if(disc[nodo] == low[nodo]) res[edgeNumber] = 2;
        }
    
}

 */